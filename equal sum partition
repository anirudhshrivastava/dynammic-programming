bool solve(vector<int> &arr, int n,int sum,vector<vector<int> > &dp){
    if(sum==0){
        return true;
    }
    if(n==0 && sum!=0){
        return false;
    }
    if(dp[n][sum]!=-1){
        return dp[n][sum];
    }
    if(arr[n-1] > sum){
        return solve(arr,n-1,sum,dp);
    }
   // else if(arr[n-1]<=sum){
    else{
        return dp[n][sum]=solve(arr,n-1,sum-arr[n-1],dp) || solve(arr,n-1,sum,dp);
    }
}
bool canPartition(vector<int> &arr, int n)
{
	// Write your code here.
    int sum=0;
    for(int i=0;i<n;i++){
        sum=sum+arr[i];
    }
    if(sum%2!=0){
        return false; 
    }
    vector<vector<int> > dp(n+1, vector<int> (sum+1,-1));
    if(sum%2==0){
     solve(arr,n,sum/2,dp);
    }
}
